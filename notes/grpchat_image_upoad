# consumers.py
import asyncio
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from .models import Image

class ImageUploadConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        await self.accept()

    async def disconnect(self, close_code):
        pass

    async def receive(self, text_data=None, bytes_data=None):
        if bytes_data:
            # Handle the image upload
            image = await self.save_image(bytes_data)
            await self.send(text_data=f"Image uploaded successfully. ID: {image.id}")

    @database_sync_to_async
    def save_image(self, image_data):
        # Save the image to the database
        image = Image.objects.create(data=image_data)
        return image

# views.py
from django.http import JsonResponse
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync

def upload_image(request):
    if request.method == 'POST' and request.FILES.get('image'):
        image = request.FILES['image']
        # Process the image (e.g., save it to the database)
        # ...

        # Notify connected clients via WebSocket
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            "image_updates",
            {
                "type": "image_update",
                "message": "New image uploaded"
            }
        )

        return JsonResponse({'status': 'success'})
    return JsonResponse({'status': 'error'}, status=400)

# routing.py
from django.urls import path
from . import consumers

websocket_urlpatterns = [
    path('ws/upload/', consumers.ImageUploadConsumer.as_asgi()),
]