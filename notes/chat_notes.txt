const host = window.location.hostname;
const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
const port = window.location.port || (protocol === 'wss:' ? '443' : '80');
const name = encodeURIComponent(nickname);

let currentUrl = window.location.href;
let url = new URL(currentUrl);
let group_num = url.searchParams.get('room') || 123;

const socketURL = `${protocol}//${host}:${port}/room/${group_num}/?customer_name=${name}`;
let socket = null;

function newSocket() {
    if (socket !== null && socket.readyState === WebSocket.OPEN) {
        socket.close();
    }

    socket = new WebSocket(socketURL);

    socket.onopen = function(event) {
        handleSocketOpen();
    };

    socket.onmessage = function(event) {
        handleSocketMessage(event);
    };

    socket.onclose = function(event) {
        handleSocketClose();
    };

    socket.onerror = function(error) {
        console.error("WebSocket error:", error);
    };
}

function openConnect() {
    if (socket.readyState === WebSocket.OPEN) return;
    newSocket();
}

newSocket();

function closeConnect() {
    if (socket) {
        socket.close(); // Close the connection
    }
}

function handleSocketOpen() {
    console.log("WebSocket connection opened.");
    appendStatusMessage("连接成功", "green", "你有朋友了 (｡♥‿♥｡)");
}

function handleSocketMessage(event) {
    const data = JSON.parse(event.data);
    if (data.type === 'message') {
        displayChatMessage(data.message);
    } else if (data.type === 'image') {
        displayImage(data.image, data.name);
    }
    scrollToBottom();
}

function handleSocketClose() {
    console.log("WebSocket connection closed.");
    logMessage(nickname + '连接已断开', 'error');
    appendStatusMessage("连接关闭", "red", "你没朋友了 ｡ﾟ･ (>﹏<) ･ﾟ｡");
}

function handleUpload() {
    const fileInput = document.getElementById('fileInput');
    const file = fileInput.files[0];

    if (file) {
        const reader = new FileReader();

        reader.onload = function(event) {
            const imageUrl = event.target.result;
            socket.send(JSON.stringify({
                'type': 'image',
                'name': nickname,
                'image': imageUrl
            }));
        };

        reader.readAsDataURL(file);
    } else {
        alert('Please select a file to upload.');
    }
}

function displayImage(imageUrl, name) {
    const imageContainer = document.getElementById('message-container');
    const imgElement = document.createElement('img');
    imgElement.src = imageUrl;

    appendUsername(imageContainer, name);

    imgElement.onload = () => {
        const resizedImageUrl = resizeImage(imgElement, imageContainer);
        appendResizedImage(imageContainer, resizedImageUrl);
        scrollToBottom();
    };

    imgElement.onerror = () => {
        handleImageError(imageContainer);
    };
}

function resizeImage(image, container) {
    const containerWidth = container.offsetWidth - 20; // Adjust if needed
    const containerHeight = 200; // Adjust if needed

    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    const scale = Math.min(containerWidth / image.naturalWidth, containerHeight / image.naturalHeight);
    canvas.width = image.naturalWidth * scale;
    canvas.height = image.naturalHeight * scale;

    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);

    return canvas.toDataURL('image/jpeg');
}

function appendResizedImage(container, imageUrl) {
    const resizedImgElement = document.createElement('img');
    resizedImgElement.src = imageUrl;
    resizedImgElement.style.maxWidth = '100px';
    resizedImgElement.style.display = 'inline-block';

    container.appendChild(resizedImgElement);
    container.appendChild(document.createElement("div")).innerText = "\n";
}

function handleImageError(container) {
    const errorMessage = document.createElement("div");
    errorMessage.innerText = "Failed to load image";
    errorMessage.style.color = "red";
    container.appendChild(errorMessage);

    const placeholder = document.createElement('img');
    placeholder.src = 'static/images/meme/miku_impatient.png'; // Ensure correct path
    placeholder.style.maxWidth = '100px';
    placeholder.style.display = 'inline-block';
    container.appendChild(placeholder);

    container.appendChild(document.createElement("div")).innerText = "\n";
    scrollToBottom();
}

function sendMessage() {
    if (socket.readyState === WebSocket.OPEN) {
        let message = document.getElementById("txt").value.trim();
        if (message !== "") {
            socket.send(JSON.stringify({
                'type': 'message',
                'name': nickname,
                'message': message
            }));
            document.getElementById("txt").value = "";
        }
    } else {
        socket_state(socket);
        openConnect();
    }
}

function displayChatMessage(data) {
    let message = document.createElement("div");
    let messageText = data.trim();

    let regex = /^([^:]*):(.*)$/;
    let match = regex.exec(messageText);

    if (match) {
        let textBeforeColon = document.createElement("span");
        textBeforeColon.textContent = match[1].trim();
        textBeforeColon.style.color = "blue";

        let textAfterColon = document.createElement("span");
        textAfterColon.textContent = match[2].trim();

        message.appendChild(textBeforeColon);
        message.appendChild(document.createTextNode(": "));
        message.appendChild(textAfterColon);
    } else {
        let textNode = document.createTextNode(messageText);
        message.appendChild(textNode);
    }

    document.querySelector(".message").appendChild(message);
    scrollToBottom();
}

function appendStatusMessage(status, color, message) {
    let tag = document.createElement("div");
    tag.innerText = status;
    tag.style.color = color;
    tag.append(`\t${message}`);
    let message_sect = document.querySelector(".message");
    if (message_sect) {
        message_sect.appendChild(tag);
    }
}

function scrollToBottom() {
    var messageContainer = document.getElementById('message-container');
    messageContainer.scrollTop = messageContainer.scrollHeight;
}

function logMessage(message, style = 'default') {
    const styles = {
        default: 'color: black;',
        warning: 'color: orange; font-weight: bold;',
        error: 'color: red; font-weight: bold;'
    };
    console.log(`%c${message}`, styles[style]);
}

function socket_state(socket) {
    if (socket.readyState === WebSocket.OPEN) {
        logMessage('The connection is open', 'warning');
    } else if (socket.readyState === WebSocket.CONNECTING) {
        logMessage('The connection is connecting', 'warning');
    } else if (socket.readyState === WebSocket.CLOSING) {
        logMessage('The connection is closing', 'warning');
    } else if (socket.readyState === WebSocket.CLOSED) {
        logMessage('The connection is closed', 'warning');
    } else {
        logMessage('The connection state is unknown', 'warning');
    }
}

function dataURLToBlob(dataURL) {
    const BASE64_MARKER = ';base64,';
    if (dataURL.indexOf(BASE64_MARKER) === -1) {
        const parts = dataURL.split(',');
        const contentType = parts[0].split(':')[1];
        const raw = parts[1];
        return new Blob([raw], { type: contentType });
    }

    const parts = dataURL.split(BASE64_MARKER);
    const contentType = parts[0].split(':')[1];
    const raw = window.atob(parts[1]);
    const rawLength = raw.length;

    const uInt8Array = new Uint8Array(rawLength);
    for (let i = 0; i < rawLength; ++i) {
        uInt8Array[i] = raw.charCodeAt(i);
    }

    return new Blob([uInt8Array], { type: contentType });
}
