// Determine the current host and protocol
const host = window.location.hostname;
const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
const port = window.location.port || (protocol === 'wss:' ? '443' : '80');
const name = encodeURIComponent(nickname);

// Construct the WebSocket URL dynamically
const socketURL = `${protocol}//${host}:${port}/room/123/?customer_name=${name}`;

let socket = null;

function newSocket() {
    // Close existing socket if it's open
    if (socket !== null && socket.readyState === WebSocket.OPEN) {
        socket.close();
    }

    // Create a new WebSocket connection
    socket = new WebSocket(socketURL);

    socket.onopen = function(event) {
        console.log("WebSocket connection opened.");
        let tag = document.createElement("div");
        tag.innerText = "连接成功";
        tag.style.color = "green";
        tag.append("\t你有朋友了 (｡♥‿♥｡) ");
        document.querySelector(".message").appendChild(tag);
    };

    socket.onmessage = function(event) {
        let message = document.createElement("div");
        let messageText = event.data;
        
        // Split the message by the part you want to style differently
        let parts = messageText.split(":");
        
        // Create a wrapper for the first part (assuming it's before the colon)
        let textBeforeColon = document.createElement("span");
        textBeforeColon.textContent = parts[0];
        textBeforeColon.style.color = "blue"; // Example: change color to blue
        
        // Create a wrapper for the second part (assuming it's after the colon)
        let textAfterColon = document.createElement("span");
        textAfterColon.textContent = parts.slice(1).join(":");
        
        // Append both parts to the message div
        message.appendChild(textBeforeColon);
        message.appendChild(textAfterColon).prepend(": ");
        
        // Append the message div to the document
        document.querySelector(".message").appendChild(message);

        scrollToBottom();
    };

    socket.onclose = function(event) {
        console.log("WebSocket connection closed.");
        logMessage(nickname + '连接已断开', 'error');
        let tag = document.createElement("div");
        tag.innerText = "连接关闭";
        tag.append("\t你没朋友了 ｡ﾟ･ (>﹏<) ･ﾟ｡ ");
        tag.style.color = "red";
        document.querySelector(".message").appendChild(tag);
    };

    socket.onerror = function(error) {
        console.error("WebSocket error:", error);
    };
}

// Initial connection
newSocket();

// Function to handle button click and trigger file upload
function handleUpload() {
    const fileInput = document.getElementById('fileInput');
    const file = fileInput.files[0];

    if (file) {
        const reader = new FileReader();

        reader.onload = function(event) {
            const imageUrl = event.target.result;

            // Display the uploaded image immediately
            displayImage(imageUrl);

            // Send the image URL via WebSocket
            socket.send(JSON.stringify({
                'type': 'image',
                'image': imageUrl
            }));
        };

        reader.readAsDataURL(file);
    } else {
        alert('Please select a file to upload.');
    }
}

// Display uploaded image
function displayImage(imageUrl) {
    const imageContainer = document.getElementById('message-container');
    const imgElement = document.createElement('img');
    imgElement.src = imageUrl;
    imgElement.style.maxWidth = '100px'; // Adjust styling as needed
    imgElement.style.display = 'inline-block';
    imageContainer.appendChild(imgElement);
}

// Function to send a chat message via WebSocket
function sendMessage() {
    if (socket.readyState === WebSocket.OPEN) {
        let message = document.getElementById("txt").value.trim();
        if (message !== "") {
            socket.send(JSON.stringify({
                'type': 'message',
                'message': nickname + " : " + message
            }));
            document.getElementById("txt").value = "";
        }
    } else {
        socket_state(socket); // Handle socket state if necessary
    }
}

// Function to log messages with different styles
const styles = {
    default: 'color: black;',
    warning: 'color: orange; font-weight: bold;',
    error: 'color: red; font-weight: bold;'
};

function logMessage(message, style = 'default') {
    console.log(`%c${message}`, styles[style]);
}

// Function to check and display socket state
function socket_state(socket) {
    if (socket.readyState === WebSocket.OPEN) {
        logMessage('The connection is open', 'warning');
    } else if (socket.readyState === WebSocket.CONNECTING) {
        logMessage('The connection is connecting', 'warning');
    } else if (socket.readyState === WebSocket.CLOSING) {
        logMessage('The connection is closing', 'warning');
    } else if (socket.readyState === WebSocket.CLOSED) {
        logMessage('The connection is closed', 'warning');
    } else {
        logMessage('The connection state is unknown', 'warning');
    }
}

// Function to scroll to the bottom of message container
function scrollToBottom() {
    var messageContainer = document.getElementById('message-container');
    messageContainer.scrollTop = messageContainer.scrollHeight;
}

// Function to handle Enter key press for sending messages
function handleMessage(event) {
    if (event.key === "Enter") {
        sendMessage();
    }
}
