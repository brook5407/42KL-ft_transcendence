from channels.generic.websocket import WebsocketConsumer
from channels.exceptions import StopConsumer
from asgiref.sync import async_to_sync
import json

class ChatConsumer(WebsocketConsumer):
    def websocket_connect(self, message):
        self.accept()
        async_to_sync(self.channel_layer.group_add)("chat_room", self.channel_name)

    def websocket_receive(self, message):
        text_data = json.loads(message['text'])
        if text_data['type'] == 'message':
            self.send_chat_message(text_data['message'])
        elif text_data['type'] == 'image':
            self.send_image_message(text_data['image'])

    def websocket_disconnect(self, message):
        async_to_sync(self.channel_layer.group_discard)("chat_room", self.channel_name)
        raise StopConsumer()

    def send_chat_message(self, message):
        async_to_sync(self.channel_layer.group_send)(
            "chat_room",
            {
                "type": "chat.message",
                "message": message
            }
        )

    def send_image_message(self, image_data):
        async_to_sync(self.channel_layer.group_send)(
            "chat_room",
            {
                "type": "image.message",
                "image": image_data
            }
        )

    def chat_message(self, event):
        self.send(text_data=json.dumps({
            'type': 'message',
            'message': event['message']
        }))

    def image_message(self, event):
        self.send(text_data=json.dumps({
            'type': 'image',
            'image': event['image']
        }))
