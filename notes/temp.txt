// // Determine the current host and protocol
// const host = window.location.hostname;
// const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';

// // Construct the WebSocket URL dynamically
// const port = window.location.port || (protocol === 'wss:' ? '443' : '80');
// // const socketURL = `${protocol}//${host}:${port}/room/123/`;
// const nickname = nickname;
// const socketURL = `${protocol}//${host}:${port}/room/123/`;
// // const socketURL = `${protocol}//${host}:${port}/room/123/?customer_name=${nickname}`;

function closeConnect(){
    socket.close(); //关闭连接 //向服务器发送断开连接的请求
}


function handleMessage(event){
    if(event.key === "Enter"){
        sendMessage();
    }
}

function socket_state(socket){
    if (socket.readyState === WebSocket.OPEN) {
        logMessage('The connection is open', 'warning');
    } else if (socket.readyState === WebSocket.CONNECTING) {
        logMessage('The connection is connecting', 'warning');
    } else if (socket.readyState === WebSocket.CLOSING) {
        logMessage('The connection is closing', 'warning');
    } else if (socket.readyState === WebSocket.CLOSED) {
        logMessage('The connection is closed', 'warning');
    } else {
        logMessage('The connection state is unknown', 'warning');
    }
}


// // Determine the current host and protocol
// const host = window.location.hostname;
// const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';

// // Construct the WebSocket URL dynamically
// const port = window.location.port || (protocol === 'wss:' ? '443' : '80');
// const socketURL = `${protocol}//${host}:${port}/room/123/`;

// // Create a WebSocket connection
// const socket = new WebSocket(socketURL);
let socket = null;

function newSocket(){
    // let protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    // let socketURL = `${protocol}//${window.location.host}/room/123/`;

    // Determine the current host and protocol
    const host = window.location.hostname;
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';

    // Construct the WebSocket URL dynamically
    const port = window.location.port || (protocol === 'wss:' ? '443' : '80');
    // const socketURL = `${protocol}//${host}:${port}/room/123/`;
    const name = nickname;
    // const socketURL = `${protocol}//${host}:${port}/room/123/`;
    const socketURL = `${protocol}//${host}:${port}/room/123/?customer_name=${encodeURIComponent(name)}`;
    // const socketURL = `${protocol}//${host}:${port}/room/123/?customer_name=${name}`;

    // Close existing socket if it's open
    if (socket !== null && socket.readyState === WebSocket.OPEN) {
        socket.close();
    }

    socket = new WebSocket(socketURL);

    socket.onopen = function(e){
        console.log("连接成功");
        let tag = document.createElement("div");
        tag.innerText = "连接成功";
        tag.style.color = "green";
        tag.append("\t你有朋友了 (｡♥‿♥｡) ");
        document.querySelector(".message").appendChild(tag);
    }
    
    // //回掉函数 //当服务器发送消息过来的时候，会触发这个函数
    // socket.onmessage = function(e){
    //     scrollToBottom();
    //     let message = document.createElement("div");
    //     message.innerText = e.data;
    //     document.querySelector(".message").appendChild(message);
    // } // e.data是服务器发送过来的消息

    socket.onmessage = function(e){

        // console.log("e.data : " + e);
        // var image = JSON.parse(e.data);
        // if (image.type === 'image') {
        //     displayImage(image.image);
        // }

        let message = document.createElement("div");
        let messageText = e.data;
        
        // Split the message by the part you want to style differently
        let parts = messageText.split(":"); // Example split by colon
        
        // Create a wrapper for the first part (assuming it's before the colon)
        let textBeforeColon = document.createElement("span");
        textBeforeColon.textContent = parts[0];
        
        // Create a wrapper for the second part (assuming it's after the colon)
        let textAfterColon = document.createElement("span");
        textAfterColon.textContent = parts.slice(1).join(":"); // Join back remaining parts
        
        // Style the second part differently (change color for example)
        textBeforeColon.style.color = "blue"; // Example: change color to blue
        
        // Append both parts to the message div
        message.appendChild(textBeforeColon);
        message.appendChild(textAfterColon).prepend(": ");
        
        // Append the message div to the document
        document.querySelector(".message").appendChild(message);

        // let imageUrl = 

        // // Create an image element
        // let image = document.createElement("img");
        // image.src = imageUrl; // Set the src attribute to the image URL
    
        // // Append the image to the .message element
        // document.querySelector(".message").appendChild(image);

        scrollToBottom();

    }
    
    
    socket.onclose = function(e){
    
        logMessage(nickname + '连接已断开', 'error');
        let tag = document.createElement("div");
        tag.innerText = "连接关闭";
        tag.append("\t你没朋友了 ｡ﾟ･ (>﹏<) ･ﾟ｡ ");
        tag.style.color = "red";
        document.querySelector(".message").appendChild(tag);
    }
    
}

newSocket();



function displayImage(imageUrl) {
    const imageContainer = document.getElementById('message-container');
    
    // Create an <img> element and set its src attribute to the imageUrl
    const imgElement = document.createElement('img');
    imgElement.src = imageUrl;
    imgElement.style.maxWidth = '100px'; // Adjust styling as needed
    imgElement.style.display = 'inline-block';
    // Append the image element to the container
    // imageContainer.innerHTML = ''; // Clear previous content if any
    imageContainer.appendChild(imgElement);
}

// // Function to display the uploaded image in the browser
// function displayImage(imageUrl) {
//     const imageContainer = document.getElementById('imageContainer');

//     // Clear previous content
//     imageContainer.innerHTML = '';

//     // Create an <img> element and set its attributes
//     const imgElement = document.createElement('img');
//     imgElement.src = imageUrl;
//     imgElement.alt = 'Uploaded Image'; // Optional: Add alt text for accessibility
//     imgElement.style.maxWidth = '100%';
//     imgElement.style.height = 'auto'; // Ensure aspect ratio is maintained

//     // Append the <img> element to the image container
//     imageContainer.appendChild(imgElement);
// }

// Function to handle button click and trigger file upload
function handleUpload() {
    const fileInput = document.getElementById('fileInput');
    const file = fileInput.files[0];

    // print("file : ", file);

    if (file) {
        const reader = new FileReader();

        reader.onload = function(event) {
            const imageUrl = event.target.result;

            // Display the uploaded image immediately
            socket.send(nickname + " :");
            // socket.send(nickname + " :" + imageUrl);
            displayImage(imageUrl);
            
            // Send the image URL via WebSocket
        };

        reader.readAsDataURL(file);
    } else {
        alert('Please select a file to upload.');
    }
}



function openConnect(){
    if (socket.readyState === WebSocket.OPEN)
        return;
    newSocket(); //重新连接
}

const styles = {
    default: 'color: black;', // Default style
    warning: 'color: orange; font-weight: bold;', // Warning style
    error: 'color: red; font-weight: bold;' // Error style
};

function logMessage(message, style = 'default') {
    console.log(`%c${message}`, styles[style]);
}

function sendMessage(){
    // if socker not connected checking
    socket_state(socket);

    let message = document.getElementById("txt");

    // message.value only spaces
    if (message.value.trim() == ""){
        ;
    }
    else
        socket.send(nickname +  " :" + message.value);
    message.value = "";
} //向服务器发送消息

function scrollToBottom() {
    var messageContainer = document.getElementById('message-container');
    messageContainer.scrollTop = messageContainer.scrollHeight;
}










from channels.generic.websocket import WebsocketConsumer
from channels.exceptions import StopConsumer
from asgiref.sync import async_to_sync

import json
# from color_class import TerminalColors

import re

# ChatConsumer inherits from WebsocketConsumer. Also known as Polymorphism.
# It is called by the routing.py file (routing.websocket_urlpatterns)
# The consumer is a class that handles websocket connections
class ChatConsumer(WebsocketConsumer):
    def websocket_connect(self, message):
        self.accept()
        async_to_sync(self.channel_layer.group_add)("lounge_chat", self.channel_name)
        
    def websocket_receive(self, message):
        # self.send(text_data=message["text"]) # Send message to WebSocket for only self
        text = message['text']
        self.customer_name = self.scope['query_string'].decode().split('=')[1]
        if " shabi " in text or "傻逼" in text:
            self.send(f"服务器:【{self.customer_name}】你才是傻逼 ")
            return
        async_to_sync(self.channel_layer.group_send)(
            "lounge_chat",
            {
                "type": "chat.message",
                "text": message["text"],
            },
        )
        
    def chat_message(self, event):
        self.send(text_data=event["text"]) # Send message to WebSocket
        
    def websocket_disconnect(self, message):
        print("\033[91mwebsocket_disconnect 被断链接了\033[0m")
        async_to_sync(self.channel_layer.group_discard)("lounge_chat", self.channel_name)
        raise StopConsumer()# Stop socket conenction

    # def receive(self, text_data):
    #     image_data = json.loads(text_data)['image']
    #     self.send_image(image_data)

    # def send_image(self, image_data):
    #     self.send(text_data=json.dumps({
    #         'type': 'image',
    #         'image': image_data
    #     }))
 