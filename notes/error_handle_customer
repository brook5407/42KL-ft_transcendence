Certainly! Error handling in Django Channels, especially within WebSocket consumers, is crucial for ensuring robustness and reliability of real-time applications. Here's how you can implement basic error handling in your `ChatConsumer`, focusing on potential areas where errors might occur:

### 1. Handling JSON Parsing Errors

```python
def websocket_receive(self, message):
    try:
        query_params = parse_qs(self.scope['query_string'].decode())
        self.customer_name = query_params.get('customer_name', ['Anonymous'])[0]

        text_data = json.loads(message['text'])

        if text_data['type'] == 'message':
            if " shabi " in text_data['message'] or "傻逼" in text_data['message']:
                text_data['message'] = f"服务器:【{self.customer_name}】你才是傻逼 "
                self.send(text_data['message'])
            elif self.check_if_static_image(text_data):
                return
            elif is_online_image_url(text_data['message']):
                response = text_data['message']
                self.send_image_message(response)
            else:
                text_data['message'] = text_data['name'] + ": " + text_data['message']
                self.send_chat_message(text_data['message'])
        elif text_data['type'] == 'image':
            self.send_image_message(text_data['image'])

    except json.JSONDecodeError as e:
        error_message = {'type': 'error', 'message': 'Invalid JSON format in received message.'}
        self.send(json.dumps(error_message))
    except Exception as e:
        error_message = {'type': 'error', 'message': str(e)}
        self.send(json.dumps(error_message))
```

### Explanation:

- **Try-Except Block**: The `websocket_receive` method is wrapped in a try-except block to catch potential errors. This ensures that if there's an issue with JSON parsing (`json.loads(message['text'])`), such as invalid JSON format, a `JSONDecodeError` is caught.
  
- **Specific Error Handling**: Within the `except` block, specific exceptions like `JSONDecodeError` are caught first to handle them appropriately. For other unexpected errors (`Exception`), a generic error message is sent.

- **Sending Error Messages**: In both cases, an error message is constructed (`error_message`) containing the type of error and a descriptive message. This message is then serialized to JSON and sent back to the client using `self.send()`.

### Additional Considerations:

- **Channel Layer Errors**: When interacting with the channel layer (`async_to_sync(self.channel_layer...)`), ensure to handle potential exceptions that may arise from operations like `group_send`, `group_add`, or `group_discard`.

- **Client-Side Errors**: If the client sends malformed or unexpected messages, consider validating input data to prevent processing errors.

By implementing robust error handling like this, your WebSocket consumer can gracefully handle unexpected situations and communicate errors effectively back to connected clients, ensuring a smoother user experience and easier troubleshooting. Adjust the error messages and handling based on your specific application's needs and potential failure points.