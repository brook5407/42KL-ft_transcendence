services:
  django:
    build: ./django
    container_name: tcd_django
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      default_network:
        aliases:
          - web
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media

  db:
    image: postgres:latest
    container_name: tcd_postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: tcd_database
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    env_file:
      - .env
    ports:
      - "5433:5432"
    networks:
      default_network:
        aliases:
          - db
    healthcheck:
      test: pg_isready -U $${DB_USER} -d $${DB_NAME}
      interval: 5s
      timeout: 3s
      retries: 3

  nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: tcd_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_files:/var/www/html/static
      - media_files:/var/www/html/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - django
      - kibana
    networks:
      default_network:
        aliases:
          - nginx
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: tcd_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./certbot/certbot-init-renew.sh:/certbot-init-renew.sh
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c '/certbot-init-renew.sh; trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


  redis:
    image: redis:latest
    container_name: tcd_redis
    networks:
      default_network:
        aliases:
          - redis

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.0
    container_name: tcd_elasticsearch
    restart: unless-stopped
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      default_network:
        aliases:
          - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash-oss:6.1.0
    container_name: tcd_logstash
    restart: unless-stopped
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
      - "12201:12201/udp"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      default_network:  
        aliases:
          - logstash
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:6.1.0
    container_name: tcd_kibana
    restart: unless-stopped
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    networks:
      default_network:
        aliases:
          - kibana
    depends_on:
      - elasticsearch
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://kibana:5601/api/status
      interval: 10s
      timeout: 5s
      retries: 3

  setup-kibana-index:
    image: curlimages/curl:7.70.0
    container_name: setup_kibana_index
    volumes:
      - ./kibana/setup_kibana_index.sh:/setup_kibana_index.sh
    depends_on:
      kibana:
        condition: service_healthy
    command: ["/bin/sh", "-c", "./setup_kibana_index.sh"]
    networks:
      default_network:

volumes:
  postgres_data:
  static_files:
  media_files:

networks:
  default_network:
